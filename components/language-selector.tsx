"use client"

import type React from "react"

import { useState, useEffect, createContext, useContext } from "react"
import { Check, ChevronDown, Globe } from "lucide-react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { cn } from "@/lib/utils"

// Supported languages
const languages = [
  { code: "en", name: "English", flag: "ЁЯЗмЁЯЗз" },
  { code: "hi", name: "рд╣рд┐рдиреНрджреА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "ta", name: "родрооро┐ро┤рпН", flag: "ЁЯЗоЁЯЗ│" },
  { code: "te", name: "р░др▒Жр░▓р▒Бр░Чр▒Б", flag: "ЁЯЗоЁЯЗ│" },
  { code: "bn", name: "ржмрж╛ржВрж▓рж╛", flag: "ЁЯЗоЁЯЗ│" },
  { code: "mr", name: "рдорд░рд╛рдареА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "gu", name: "ркЧрлБркЬрк░рк╛ркдрлА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "kn", name: "р▓Хр▓ир│Нр▓ир▓б", flag: "ЁЯЗоЁЯЗ│" },
  { code: "ml", name: "р┤ор┤▓р┤пр┤╛р┤│р┤В", flag: "ЁЯЗоЁЯЗ│" },
]

// Comprehensive translations for common phrases
const translations: Record<string, Record<string, string>> = {
  en: {
    dashboard: "Dashboard",
    overview: "Overview",
    patients: "Patients",
    analytics: "Analytics",
    settings: "Settings",
    login: "Login",
    signup: "Sign Up",
    welcome: "Welcome to VitalSync",
    logout: "Logout",
    patient_monitoring: "Patient Monitoring",
    disease_prediction: "Disease Prediction",
    medical_records: "Medical Records",
    cost_comparison: "Cost Comparison",
    medicine_verification: "Medicine Verification",
    health_assistant: "Health Assistant",
    total_patients: "Total Patients",
    active_monitoring: "Active Monitoring",
    critical_alerts: "Critical Alerts",
    ai_predictions: "AI Predictions",
    avg_treatment_cost: "Avg. Treatment Cost",
    hospital_network: "Hospital Network",
    doctors_available: "Doctors Available",
    verified_medicines: "Verified Medicines",
    patient_vitals: "Patient Vitals",
    recent_alerts: "Recent Alerts",
    upcoming_appointments: "Upcoming Appointments",
    features: "Features",
    stats: "Stats",
    testimonials: "Testimonials",
    contact: "Contact",
    search: "Search",
    notifications: "Notifications",
    my_account: "My Account",
    profile: "Profile",
    view: "View",
    join: "Join",
    accessibility_settings: "Accessibility Settings",
    text_size: "Text Size",
    high_contrast: "High Contrast",
    reduced_motion: "Reduced Motion",
  },
  hi: {
    dashboard: "рдбреИрд╢рдмреЛрд░реНрдб",
    overview: "рдЕрд╡рд▓реЛрдХрди",
    patients: "рдорд░реАрдЬрд╝",
    analytics: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
    settings: "рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
    login: "рд▓реЙрдЧ рдЗрди",
    signup: "рд╕рд╛рдЗрди рдЕрдк",
    welcome: "рд╡рд╛рдЗрдЯрд▓рд╕рд┐рдВрдХ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
    logout: "рд▓реЙрдЧ рдЖрдЙрдЯ",
    patient_monitoring: "рд░реЛрдЧреА рдирд┐рдЧрд░рд╛рдиреА",
    disease_prediction: "рд░реЛрдЧ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА",
    medical_records: "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд░рд┐рдХреЙрд░реНрдб",
    cost_comparison: "рд▓рд╛рдЧрдд рддреБрд▓рдирд╛",
    medicine_verification: "рджрд╡рд╛ рд╕рддреНрдпрд╛рдкрди",
    health_assistant: "рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ",
    total_patients: "рдХреБрд▓ рдорд░реАрдЬрд╝",
    active_monitoring: "рд╕рдХреНрд░рд┐рдп рдирд┐рдЧрд░рд╛рдиреА",
    critical_alerts: "рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЕрд▓рд░реНрдЯ",
    ai_predictions: "рдПрдЖрдИ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгрд┐рдпрд╛рдВ",
    avg_treatment_cost: "рдФрд╕рдд рдЙрдкрдЪрд╛рд░ рд▓рд╛рдЧрдд",
    hospital_network: "рдЕрд╕реНрдкрддрд╛рд▓ рдиреЗрдЯрд╡рд░реНрдХ",
    doctors_available: "рдЙрдкрд▓рдмреНрдз рдбреЙрдХреНрдЯрд░",
    verified_medicines: "рд╕рддреНрдпрд╛рдкрд┐рдд рджрд╡рд╛рдПрдВ",
    patient_vitals: "рд░реЛрдЧреА рдХреЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд▓рдХреНрд╖рдг",
    recent_alerts: "рд╣рд╛рд▓ рдХреЗ рдЕрд▓рд░реНрдЯ",
    upcoming_appointments: "рдЖрдЧрд╛рдореА рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ",
    features: "рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ",
    stats: "рдЖрдВрдХрдбрд╝реЗ",
    testimonials: "рдкреНрд░рд╢рдВрд╕рд╛рдкрддреНрд░",
    contact: "рд╕рдВрдкрд░реНрдХ",
    search: "рдЦреЛрдЬ",
    notifications: "рд╕реВрдЪрдирд╛рдПрдВ",
    my_account: "рдореЗрд░рд╛ рдЦрд╛рддрд╛",
    profile: "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓",
    view: "рджреЗрдЦреЗрдВ",
    join: "рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ",
    accessibility_settings: "рдкрд╣реБрдВрдЪ рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
    text_size: "рдЯреЗрдХреНрд╕реНрдЯ рд╕рд╛рдЗрдЬрд╝",
    high_contrast: "рдЙрдЪреНрдЪ рдХрдВрдЯреНрд░рд╛рд╕реНрдЯ",
    reduced_motion: "рдХрдо рдореЛрд╢рди",
  },
  ta: {
    dashboard: "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
    overview: "роХрогрпНрогрпЛроЯрпНроЯроорпН",
    patients: "роирпЛропро╛ро│ро┐роХро│рпН",
    analytics: "рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
    settings: "роЕроорпИрокрпНрокрпБроХро│рпН",
    login: "роЙро│рпНроирпБро┤рпИроп",
    signup: "рокродро┐ро╡рпБ роЪрпЖропрпНроп",
    welcome: "ро╡рпИроЯрпНроЯро▓рпНроЪро┐роЩрпНроХро┐ро▒рпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
    logout: "ро╡рпЖро│ро┐ропрпЗро▒рпБ",
    patient_monitoring: "роирпЛропро╛ро│ро┐ роХрогрпНроХро╛рогро┐рокрпНрокрпБ",
    disease_prediction: "роирпЛропрпН роХрогро┐рокрпНрокрпБ",
    medical_records: "рооро░рпБродрпНродрпБро╡ рокродро┐ро╡рпБроХро│рпН",
    cost_comparison: "роЪрпЖро▓ро╡рпБ роТрокрпНрокрпАроЯрпБ",
    medicine_verification: "рооро░рпБроирпНродрпБ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ",
    health_assistant: "роЪрпБроХро╛родро╛ро░ роЙродро╡ро┐ропро╛ро│ро░рпН",
    total_patients: "роорпКродрпНрод роирпЛропро╛ро│ро┐роХро│рпН",
    active_monitoring: "роЪрпЖропро▓ро┐ро▓рпН роХрогрпНроХро╛рогро┐рокрпНрокрпБ",
    critical_alerts: "роорпБроХрпНроХро┐роп роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН",
    ai_predictions: "AI роХрогро┐рокрпНрокрпБроХро│рпН",
    avg_treatment_cost: "роЪро░ро╛роЪро░ро┐ роЪро┐роХро┐роЪрпНроЪрпИ роЪрпЖро▓ро╡рпБ",
    hospital_network: "рооро░рпБродрпНродрпБро╡рооройрпИ роирпЖроЯрпНро╡рпКро░рпНроХрпН",
    doctors_available: "роХро┐роЯрпИроХрпНроХрпБроорпН рооро░рпБродрпНродрпБро╡ро░рпНроХро│рпН",
    verified_medicines: "роЪро░ро┐рокро╛ро░рпНроХрпНроХрокрпНрокроЯрпНроЯ рооро░рпБроирпНродрпБроХро│рпН",
    patient_vitals: "роирпЛропро╛ро│ро┐ роЙропро┐ро░рпНроиро╛роЯро┐",
    recent_alerts: "роЪроорпАрокродрпНродро┐роп роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН",
    upcoming_appointments: "ро╡ро░ро╡ро┐ро░рпБроХрпНроХрпБроорпН роЪроирпНродро┐рокрпНрокрпБроХро│рпН",
    features: "роЕроорпНроЪроЩрпНроХро│рпН",
    stats: "рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
    testimonials: "роЪро╛ройрпНро▒рпБроХро│рпН",
    contact: "родрпКроЯро░рпНрокрпБ",
    search: "родрпЗроЯро▓рпН",
    notifications: "роЕро▒ро┐ро╡ро┐рокрпНрокрпБроХро│рпН",
    my_account: "роОройродрпБ роХрогроХрпНроХрпБ",
    profile: "роЪрпБропро╡ро┐ро╡ро░роорпН",
    view: "рокро╛ро░рпНроХрпНроХ",
    join: "роЪрпЗро░",
    accessibility_settings: "роЕрогрпБроХро▓рпН роЕроорпИрокрпНрокрпБроХро│рпН",
    text_size: "роЙро░рпИ роЕро│ро╡рпБ",
    high_contrast: "роЕродро┐роХ ро╡рпЗро▒рпБрокро╛роЯрпБ",
    reduced_motion: "роХрпБро▒рпИроирпНрод роЕроЪрпИро╡рпБ",
  },
  te: {
    dashboard: "р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н",
    overview: "р░Ер░╡р░▓р▒Лр░Хр░ир░В",
    patients: "р░░р▒Лр░Чр▒Бр░▓р▒Б",
    analytics: "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░гр░▓р▒Б",
    settings: "р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒НтАМр░▓р▒Б",
    login: "р░▓р░╛р░Чр░┐р░ир▒Н",
    signup: "р░╕р▒Ир░ир▒Н р░Ер░кр▒Н",
    welcome: "р░╡р▒Ир░Яр░▓р▒НтАМр░╕р░┐р░Вр░Хр▒НтАМр░Хр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В",
    logout: "р░▓р░╛р░Чр▒Мр░Яр▒Н",
    patient_monitoring: "р░░р▒Лр░Чр░┐ р░кр░░р▒Нр░пр░╡р▒Зр░Хр▒Нр░╖р░г",
    disease_prediction: "р░╡р▒Нр░пр░╛р░зр░┐ р░Ер░Вр░Ър░ир░╛",
    medical_records: "р░╡р▒Ир░жр▒Нр░п р░░р░┐р░Хр░╛р░░р▒Нр░бр▒Бр░▓р▒Б",
    cost_comparison: "р░Цр░░р▒Нр░Ър▒Б р░кр▒Лр░▓р░┐р░Х",
    medicine_verification: "р░ор░Вр░жр▒Бр░▓ р░зр▒Гр░╡р▒Ар░Хр░░р░г",
    health_assistant: "р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б",
    total_patients: "р░ор▒Кр░др▒Нр░др░В р░░р▒Лр░Чр▒Бр░▓р▒Б",
    active_monitoring: "р░пр░╛р░Хр▒Нр░Яр░┐р░╡р▒Н р░ор░╛р░ир░┐р░Яр░░р░┐р░Вр░Чр▒Н",
    critical_alerts: "р░Хр▒Нр░░р░┐р░Яр░┐р░Хр░▓р▒Н р░Ер░▓р░░р▒Нр░Яр▒Нр░╕р▒Н",
    ai_predictions: "AI р░Ер░Вр░Ър░ир░╛р░▓р▒Б",
    avg_treatment_cost: "р░╕р░Чр░Яр▒Б р░Ър░┐р░Хр░┐р░др▒Нр░╕ р░Цр░░р▒Нр░Ър▒Б",
    hospital_network: "р░Жр░╕р▒Бр░кр░др▒Нр░░р░┐ р░ир▒Жр░Яр▒НтАМр░╡р░░р▒Нр░Хр▒Н",
    doctors_available: "р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░ир▒Нр░и р░╡р▒Ир░жр▒Нр░пр▒Бр░▓р▒Б",
    verified_medicines: "р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр░┐р░и р░ор░Вр░жр▒Бр░▓р▒Б",
    patient_vitals: "р░░р▒Лр░Чр░┐ р░кр▒Нр░░р░╛р░гр░╛р░зр░╛р░░р░╛р░▓р▒Б",
    recent_alerts: "р░Зр░Яр▒Ар░╡р░▓р░┐ р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б",
    upcoming_appointments: "р░░р░╛р░мр▒Лр░пр▒З р░Ер░кр░╛р░пр░┐р░Вр░Яр▒Нр░ор▒Жр░Вр░Яр▒Нр░▓р▒Б",
    features: "р░лр▒Ар░Ър░░р▒Нр░▓р▒Б",
    stats: "р░Чр░гр░╛р░Вр░Хр░╛р░▓р▒Б",
    testimonials: "р░Яр▒Жр░╕р▒Нр░Яр░┐р░ор▒Лр░ир░┐р░пр░▓р▒Нр░╕р▒Н",
    contact: "р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐",
    search: "р░╢р▒Лр░зр░и",
    notifications: "р░ир▒Лр░Яр░┐р░лр░┐р░Хр▒Зр░╖р░ир▒Нр░▓р▒Б",
    my_account: "р░ир░╛ р░Цр░╛р░др░╛",
    profile: "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н",
    view: "р░╡р▒Ар░Хр▒Нр░╖р░┐р░Вр░Ър░Вр░бр░┐",
    join: "р░Ър▒Зр░░р░Вр░бр░┐",
    accessibility_settings: "р░пр░╛р░Хр▒Нр░╕р▒Жр░╕р░┐р░мр░┐р░▓р░┐р░Яр▒А р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒Бр░▓р▒Б",
    text_size: "р░Яр▒Жр░Хр▒Нр░╕р▒Нр░Яр▒Н р░╕р▒Ир░Ьр▒Б",
    high_contrast: "р░Ер░зр░┐р░Х р░Хр░╛р░Вр░Яр▒Нр░░р░╛р░╕р▒Нр░Яр▒Н",
    reduced_motion: "р░др░Чр▒Нр░Чр░┐р░Вр░Ър░┐р░и р░ор▒Лр░╖р░ир▒Н",
  },
  bn: {
    dashboard: "ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб",
    overview: "ржУржнрж╛рж░ржнрж┐ржЙ",
    patients: "рж░рзЛржЧрзАрж░рж╛",
    analytics: "ржЕрзНржпрж╛ржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕",
    settings: "рж╕рзЗржЯрж┐ржВрж╕",
    login: "рж▓ржЧржЗржи",
    signup: "рж╕рж╛ржЗржи ржЖржк",
    welcome: "ржнрж╛ржЗржЯрж╛рж▓рж╕рж┐ржЩрзНржХрзЗ рж╕рзНржмрж╛ржЧрждржо",
    logout: "рж▓ржЧржЖржЙржЯ",
    patient_monitoring: "рж░рзЛржЧрзА ржкрж░рзНржпржмрзЗржХрзНрж╖ржг",
    disease_prediction: "рж░рзЛржЧ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕",
    medical_records: "ржорзЗржбрж┐ржХрзЗрж▓ рж░рзЗржХрж░рзНржб",
    cost_comparison: "ржЦрж░ржЪ рждрзБрж▓ржирж╛",
    medicine_verification: "ржУрж╖рзБржз ржпрж╛ржЪрж╛ржЗржХрж░ржг",
    health_assistant: "рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рж╣ржХрж╛рж░рзА",
    total_patients: "ржорзЛржЯ рж░рзЛржЧрзА",
    active_monitoring: "рж╕ржХрзНрж░рж┐ржпрж╝ ржкрж░рзНржпржмрзЗржХрзНрж╖ржг",
    critical_alerts: "ржЧрзБрж░рзБрждрж░ рж╕рждрж░рзНржХрждрж╛",
    ai_predictions: "ржПржЖржЗ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕",
    avg_treatment_cost: "ржЧржбрж╝ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржЦрж░ржЪ",
    hospital_network: "рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ",
    doctors_available: "ржЙржкрж▓ржмрзНржз ржбрж╛ржХрзНрждрж╛рж░",
    verified_medicines: "ржпрж╛ржЪрж╛ржЗржХрзГржд ржУрж╖рзБржз",
    patient_vitals: "рж░рзЛржЧрзАрж░ ржкрзНрж░рж╛ржгрж╢ржХрзНрждрж┐",
    recent_alerts: "рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ рж╕рждрж░рзНржХрждрж╛",
    upcoming_appointments: "ржЖрж╕ржирзНржи ржЕрзНржпрж╛ржкржпрж╝рзЗржирзНржЯржорзЗржирзНржЯ",
    features: "ржмрзИрж╢рж┐рж╖рзНржЯрзНржп",
    stats: "ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи",
    testimonials: "ржкрзНрж░рж╢ржВрж╕рж╛ржкрждрзНрж░",
    contact: "ржпрзЛржЧрж╛ржпрзЛржЧ",
    search: "ржЕржирзБрж╕ржирзНржзрж╛ржи",
    notifications: "ржмрж┐ржЬрзНржЮржкрзНрждрж┐",
    my_account: "ржЖржорж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ",
    profile: "ржкрзНрж░рзЛржлрж╛ржЗрж▓",
    view: "ржжрзЗржЦрзБржи",
    join: "ржпрзЛржЧ ржжрж┐ржи",
    accessibility_settings: "ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕рж┐ржмрж┐рж▓рж┐ржЯрж┐ рж╕рзЗржЯрж┐ржВрж╕",
    text_size: "ржЯрзЗржХрзНрж╕ржЯ рж╕рж╛ржЗржЬ",
    high_contrast: "ржЙржЪрзНржЪ ржХржиржЯрзНрж░рж╛рж╕рзНржЯ",
    reduced_motion: "ржХржорж╛ржирзЛ ржорзЛрж╢ржи",
  },
}

// Create a context to manage translations
interface LanguageContextType {
  currentLanguage: string
  setLanguage: (code: string) => void
  t: (key: string) => string
}

const LanguageContext = createContext<LanguageContextType>({
  currentLanguage: "en",
  setLanguage: () => {},
  t: (key: string) => key,
})

export function useTranslation() {
  return useContext(LanguageContext)
}

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = useState("en")

  useEffect(() => {
    // Try to get language preference from localStorage
    const savedLanguage = localStorage.getItem("language")
    if (savedLanguage && languages.some((lang) => lang.code === savedLanguage)) {
      setCurrentLanguage(savedLanguage)
    }

    // Set HTML lang attribute for screen readers
    document.documentElement.lang = currentLanguage
  }, [currentLanguage])

  const setLanguage = (code: string) => {
    setCurrentLanguage(code)
    localStorage.setItem("language", code)

    // Force re-render of components by setting a data attribute on body
    document.body.setAttribute("data-language", code)
  }

  const t = (key: string): string => {
    return translations[currentLanguage]?.[key] || translations["en"]?.[key] || key
  }

  return <LanguageContext.Provider value={{ currentLanguage, setLanguage, t }}>{children}</LanguageContext.Provider>
}

export function LanguageSelector() {
  const { currentLanguage, setLanguage } = useTranslation()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="sm" className="glass-button border-none">
          <Globe className="h-4 w-4 mr-2" />
          <span className="hidden sm:inline-block">
            {languages.find((lang) => lang.code === currentLanguage)?.flag}{" "}
            {languages.find((lang) => lang.code === currentLanguage)?.name}
          </span>
          <span className="sm:hidden">{languages.find((lang) => lang.code === currentLanguage)?.flag}</span>
          <ChevronDown className="h-3 w-3 ml-1" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="glass">
        {languages.map((language) => (
          <DropdownMenuItem
            key={language.code}
            onClick={() => setLanguage(language.code)}
            className={cn("flex items-center gap-2", currentLanguage === language.code && "bg-primary/20")}
          >
            <span>{language.flag}</span>
            <span>{language.name}</span>
            {currentLanguage === language.code && <Check className="h-4 w-4 ml-auto" />}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

